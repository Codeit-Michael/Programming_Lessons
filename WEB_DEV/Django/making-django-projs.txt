# Making Simple django projects
1. Select or create a directory. EX: "storefront" folder
2. Type "pipenv install django" to make a virtual environment. You can see
the location at virtualenv location. EX: Virtualenv location: /home/michael/.local/share/virtualenvs/storefront-SZgUppvg
3. Head to the directory and type "pipenv shell" to activate the virtualenv.
4. Go back to the orig dir and type "django-admin startproject {dir name}" to start a new project. But
it creates multiple directory. Instead lets use "django admin startproject {dir name} ."
(ADDITIONAL: If you exit it and later want to get back, cd again to the dir)
so it uses the current dir. Use "django-admin" only to see the commands.
5. A file called manage.py nxt to your project is its the wrapper. You can run
it through that file.EX: "python manage.py runserver" gives you a URL/Link that
connects you to your project and ctrl-C to stop the command.

# Using Integrated Terminal in vscode (place where you can run,etc. your V.E.)
1. Get the link through "pipenv --venv"
2. Open the command pallette at the view, select "python:select interpreter".
Choose the "enter interpreter path" then type "{link}/bin/python"
3. Run the Integrated terminal by ctrl-shift-`
ADDITIONAL: if the execute command returns invalid syntax, just make a new
terminal.
4. To know if it works, it has "source" at the beginning and has a activate at the end.

# Making Django apps
1. Head to the dir storefront, type "python manage.py startapp {name(lets say its name is playground)}"
2. Then, list its name at storefront/settings.py/INSTALLED_APPS

# Writing Views (http request-resopnse)
1. Create your request-response at the dir playground/views.py

# Mapping URLs to Views
1. Make urls.py in dir playground & import views and path from django.urls
2. Make a urlpatterns list for URL configurations to know wwhat does it access
3. Head to storefront/urls.py. At the example, we follow the instructions for
the URLConf rules beceause it is what we needed

# Using templates (shows how to make django templates and how it works)
Ex:
1. Make a templates dir at app dir (playground) and your template (HTML,CSS
,JS) but lets just use index.html.
2. Head to the views.py and make a function that returns your template.
Ex; def temp(request): return render(request,'index.html'). If render is not
already imported from django.shortcuts, then return it.
3. You can also add logic,etc.

# Debugging django 
Using vscode
- At the left corner of vscode, theres a play button w/ bug drawing. It is
the run & debug button, where you can debug any of those in choices, aynway
lets pick the django. You can found lanuch.json at .vscode dir. In py files,
if you press the red dots at the left most of each line which gives you a
breakpoint where you can run the code until the breaking point.

Django debug toolbar
1. On your integrated terminal, "python -m pip install django-debug-toolbar"
then add "debug_toolbar" at the installed apps.
2. At the urls.py/urlspattern list inside the django project folder (in our
example, we have storefront), import debug_toolbar and add 
path('__debug__/',include(debug_toolbar.urls)).
3. Add 'debug_toolbar.middleware.DebugToolbarMiddleware', at the middleware 
list's top.
4. Add the whwole internal ips list in anywhere at the settings.py because
it doesn't exist there.
You can see its whole steps in django debug toolbar website/INSTALLATION.

# Data Modeling
In making apps, broke them into small parts and if possible, build them 
into small particular app.

Monolith- must be all install/ed and update/d at the same time. In some 
cases, you might encounter independent apps where they must be independent
for all of the time like the tagging apps/methods.

Methods like these must be self-contained and zero coupling(no connections
to other apps/methods).
