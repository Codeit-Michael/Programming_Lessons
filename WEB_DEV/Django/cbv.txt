## Why class based views?
-Inheritance so we can write reusable code & make our app more DRY (Don't Repeat
 Yourself)
-Built in methods and views to eliminate redundancy for common use cases.
-separate our code by http method types such as GET and POST. 


Example: Function based view

# Views.py
from django.shortcuts import render
from .models import Product

def productList(request):
	products = Product.objects.all()
	context = {'products/':products}
	return render(request, 'base/product_list.html', context)

# Urls.py
from . import views 

urlpatterns = [
    path('products', views.productsList, name='products'),
]


Ex: Class based view

# Views.py
from django.views.generic.list import ListView
from .models import Product 

class ProductList(ListView):
	model = Product

# Urls.py
from . import views 

urlpatterns = [
    path('products', views.ProductList.as_view(), name='products'),
]


-As we see here they have some differences. 

## The 'as_view()' method
-Because we are using a CBV, we need to add the “as_view” method for our url resolver.
This is because the django url resolver cannot process a class but instead needs a 
function. To resolve this, we trigger the “as_view” method from our “View” class which 
we inherited from and the “as_view” method will call the correct view function 
depending on the method sent, therefore giving the url resolver a function.


-Django Class Based Views can make different actions using the built in methods from 
generic views (django.views.generic.list)


-In this case we inherited from a built in view called ListView which at a minimum just 
needed a model name or a queryset. The view already knows which template to render, and 
how to pass in the data into the template. With a function based view we have to take 
care of each step by first querying the database, passing in our context data and then 
rendering our template.


## Separating code with HTTP methods

Ex: Function based view

# Views.py
from django.shortcuts import render
from .models import Product

def productsList(request):
	products = Product.objects.all()
	
	if request.method == 'POST':
	Product.object.create()
	
	context = {'products':products}
	return render(request, 'base/product_list.html', context)

 

Ex: Class based view 

# Views.py
from django.views.generic.list import ListView
from .models import Product 

class ProductList(ListView):
	model = Product

	def post(self, request):
		Product.object.create()

-With class based views we have a function for different methods. So if we send a GET 
request, then the “get” function gets triggered and any logic we have in there gets 
processed. If we send a “post” request then that request is sent to the “post” function 
for processing. This makes for much cleaner code by separating our request. 


## The "View" class 
-While django provides us with a number of built in class based views to work with, at 
the core of all these views in one main view called “View”. This is a class that all 
other views will inherit from and provides us with the core functionality to make a 
django class based view.

from django.views.generic import View
from .models import Product 

class ProductList(View):

    def get(self, request, *args, **kwargs): 
        products = Product.objects.all()
        context  = {'products':products}
        return render(request, 'base/product_list.html', context)

    def post(self, request, *args, **kwargs): 
        pass


## Keeping things DRY

-Now in this case all we need is a simple view that returns back a template with a queryset 
of data. Thankfully django already knows that this is a common task so we don't have to 
write all the logic ourselves. This is a perfect example of where we may want to use the 
built in “ListView” turning the view from what we currently have into this:

from django.views.generic.list import ListView
from .models import Product 

class ProductList(ListView):
	model = Product


## CRUD Application Example

-Let’s see what a collection of views would look like for a simple application with CRUD 
functionality. Let's say our todo app will do the following:
 1.List out our to do items
 2.View a single item
 3.Create a new item
 4.Update an existing item
 5.Delete an item

-Here’s what each view should look like in our application. 

# Views.py
from django.views.generic.list import ListView
from django.views.generic.detail import DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.urls import reverse_lazy
from .models import Task

class TaskList(ListView):
	   model = Task

class TaskDetail(DetailView):
	   model = Task

class TaskCreate(CreateView):
	   model = Task
       fields = ['title', 'description', 'complete']
       success_url = reverse_lazy('tasks')

class TaskUpdate(UpdateView):
       model = Task
       fields = ['title', 'description', 'complete']
       success_url = reverse_lazy('tasks')

class TaskDelete(DeleteView):
      model = Task
      context_object_name = 'task'
      success_url = reverse_lazy('tasks')

 
# urls.py 
from .views import TaskList, TaskDetail, TaskCreate, TaskUpdate, TaskDelete

urlpatterns = [
    path('', TaskList.as_view(), name='tasks'),
    path('task/<str:pk>/', TaskDetail.as_view(), name='task'),
    path('task-create/', TaskCreate.as_view(), name='task-create'),
    path('task-update/<str:pk>/', TaskUpdate.as_view(), name='task-update'),
    path('task-delete/<str:pk>/', TaskDelete.as_view(), name='task-delete'),
]

-The following built in views have been created by the django team to make these types of 
operations easier for us.


Overriding Default values

# LISTVIEWS
class TaskList(ListView):
	model = Task
	template_name = 'base/tasks.html'
	context_object_name = 'tasks'
	paginate_by = 5
	ordering = ['-date_created']

# DETAILVIEW
class TaskDetail(DetailView):
     model = Task
     template_name = 'base/task.html'
     context_object_name = 'task'
     pk_url_kwarg = 'custom_pk'

# CREATEVIEW
class TaskCreate(CreateView):
    model = Task
	success_url = reverse_lazy('tasks')
	template_name = 'base/form.html'
	form_class = TaskForm

DELETEVIEW
class TaskDelete(DeleteView):
    model = Task
    template_name = 'base/delete.html'
    context_object_name = 'task'
    pk_url_kwarg = 'custom_pk'
