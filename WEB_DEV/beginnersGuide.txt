What is open source?
 The term open source refers to something people can modify and share because 
its design is publicly accessible.


What is open source software?
 Open source software is software with source code that anyone can inspect, 
modify, and enhance.


Private softwares are called close source softwares or proprietary softwares.


What is Cloud Computing?
 Cloud computing is the delivery of computing services – including servers, 
storage, databases, networking, software, analytics and intelligence – over 
the Internet (“the cloud”) to offer faster innovation, flexible resources and 
economies of scale. In the simplest terms, cloud computing means storing and 
accessing data and programs over the internet instead of your computer's hard 
drive.


Orienting yourself to a new project
 Learn to read the room before starting conversations about your interests. Why?
how if they are talking about goldfish and you start to talk about llamas? They 
will stare so strange to you right?


Anatomy of an open source
 Spending years on only one open source project means your comfortable with it. 
But every open source has different environment so try to move to different 
projects and you will understand the norms,vocabulary and communication style 
are so different. That said, many open source project follows a similar project 
structure. Understanding the roles and overall process helps you to understand 
the project quickly.


A typical open source has:
 *Author: The person/s or organization that created the project

 *Owner: The person/s who has administrative ownership over the organization or 
  repository (not always the same as the original author)

 *Maintainers: Contributors who are responsible for driving the vision and 
  managing the organizational aspects of the project (They may also be authors 
  or owners of the project.)

 *Contributors: Everyone who has contributed something back to the project

 *Community Members: People who use the project. They might be active in 
  conversations or express their opinion on the project’s direction

Bigger projects may also have subcommittees or working groups focused on 
different tasks, such as tooling, triage, community moderation, and event 
organizing. Look on a project’s website for a “team” page, or in the repository 
for governance documentation, to find this information.


A project also has documentation. These files are usually listed in the top 
level of a repository.

 *LICENSE: By definition, every open source project must have an open source 
  license. If the project does not have a license, it is not open source.

 *README: The README is the instruction manual that welcomes new community 
  members to the project. It explains why the project is useful and how to get 
  started.

 *CONTRIBUTING: Whereas READMEs help people use the project, contributing docs 
  help people contribute to the project. It explains what types of contributions
   are needed and how the process works. While not every project has a 
  CONTRIBUTING file, its presence signals that this is a welcoming project to 
  contribute to.

 *CODE_OF_CONDUCT: The code of conduct sets ground rules for participants’ 
  behavior associated and helps to facilitate a friendly, welcoming environment.
   While not every project has a CODE_OF_CONDUCT file, its presence signals that
   this is a welcoming project to contribute to.

 *Other documentation: There might be additional documentation, such as 
  tutorials, walkthroughs or governance policies, especially on bigger projects.


Open Source project tools for organizing discussions
 Reading through the archives will give you a good picture of how the community 
thinks and works.

 *Issue tracker: Where people discuss issues related to the project.

 *Pull requests: Where people discuss and review changes that are in progress.

 *Discussion forums or mailing lists: Some projects may use these channels for 
  conversational topics (for example, “How do I…“ or “What do you think about…“ 
  instead of bug reports or feature requests). Others use the issue tracker for 
  all conversations.

 *Synchronous chat channel: Some projects use chat channels (such as Slack or 
  IRC) for casual conversation, collaboration, and quick exchanges.


Finding a Project to contribute to

You can use one of the following resources to help you discover and contribute
to new projects:
 *GitHub Explore
 *Open Source Friday
 *First Timers Only
 *CodeTriage
 *24 Pull Requests
 *Up For Grabs
 *Contributor-ninja
 *First Contributions
 *SourceSort


Contributing to a Project

 *Give context
  If you find an error or you had a new idea, tell them what you were doing and 
  explain it as clear as you can.

 *Do your homework beforehand
  Before asking for help check the project's README,documentation,mailing list,
  issues(open/closed) then search for answers.

 *Keep your requests direct and short
  Every contribution, no matter how simple or helpful, requires someone else’s 
  review. Many projects have more incoming requests than people available to 
  help. Be concise, straight to your point like "I'd like to write an API 
  tutorial"

 *Keep all communication public
  Your questions and their answer as response to you may help to other people 
  who has the same problem as yours.

 *It’s okay to ask questions (but be patient!)
  Everybody was new to the project at some point, and even experienced 
  contributors need to get up to speed when they look at a new project. By the 
  same token, even longtime maintainers are not always familiar with every part 
  of the project. Show them the same patience that you’d want them to show to 
  you.
   EX: "Thanks for looking into this error. I followed your suggestions. 
   Here’s the output.”

 *Respect the community's decision
  If they disagree to your plan or they had different vision to the project, you
  must respect their decision and listen to their reason. If you disagree to 
  them, you can always work on your own fork or start your own project.


Gathering Context
 Before you open an issue or pull request, check the project’s contributing docs
  (usually a file called CONTRIBUTING, or in the README), to see whether you 
 need to include anything specific. For example, they may ask that you follow 
 a template, or require that you use tests.

 If you want to make a substantial contribution, open an issue to ask before 
 working on it. It’s helpful to watch the project for a while (on GitHub, you 
 can click “Watch” to be notified of all conversations), and get to know 
 community members, before doing work that might not get accepted.

Opening an issue

You should usually open an issue in the following situations:
 *Report an error you can’t solve yourself
 *Discuss a high-level topic or idea (for example, community, vision or 
  policies)
 *Propose a new feature or other project idea

Tips for communicating on issues:
 *If you see an open issue that you want to tackle, comment on the issue to let 
  people know you’re on it. That way, people are less likely to duplicate your 
  work.
 *If an issue was opened a while ago, it’s possible that it’s being addressed 
  somewhere else, or has already been resolved, so comment to ask for 
  confirmation before starting work.
 *If you opened an issue, but figured out the answer later on your own, comment 
  on the issue to let people know, then close the issue. Even documenting that 
  outcome is a contribution to the project.


Opening a Pull Request

If the project is on GitHub, here’s how to submit a pull request:

 *Fork the repository and clone it locally. Connect your local to the original 
  “upstream” repository by adding it as a remote. Pull in changes from 
  “upstream" often so that you stay up to date so that when you submit your pull
   request, merge conflicts will be less likely. (See more detailed instructions
   here.)

 *Create a branch for your edits.

 *Reference any relevant issues or supporting documentation in your PR (for 
  example, “Closes #37.”)

 *Include screenshots of the before and after if your changes include 
  differences in HTML/CSS. Drag and drop the images into the body of your pull 
  request.

 *Test your changes! Run your changes against any existing tests if they exist 
  and create new ones when needed. Whether tests exist or not, make sure your 
  changes don’t break the existing project.

 *Contribute in the style of the project to the best of your abilities. This may
   mean using indents, semi-colons or comments differently than you would in 
  your own repository, but makes it easier for the maintainer to merge, others 
  to understand and maintain in the future.


Things may happen after you submit your contribution

 *You don't get response 
  Hopefully you checked the project for signs of activity before making a 
  contribution.  If you know the name of the right person to review your 
  contribution, you can @-mention them in that thread. If still nothing happens,
  it's a bad feeling, find another project or way to contribute.

 *Someone requests changes to your contribution
  When someone requests changes, be responsive. They’ve taken the time to review
   your contribution. Opening a PR and walking away is bad form. If you don’t 
  know how to make changes, research the problem, then ask for help if you need 
  it. If you don’t have time to work on the issue anymore (for example, if the 
  conversation has been going on for months, and your circumstances have 
  changed), let the maintainer know so they’re not expecting a response. 
  Someone else may be happy to take over.

 *Your contribution doesn't get accepted
  Your contribution may or may not be accepted in the end. Hopefully you didn’t 
  put too much work into it already. If you’re not sure why it wasn’t accepted, 
  it’s perfectly reasonable to ask the maintainer for feedback & clarification. 
  Ultimately, however, you’ll need to respect that this is their decision. Don’t
   argue or get hostile. You’re always welcome to fork and work on your own 
  version if you disagree!

 *Your contribution get accepted
  There you go baby, You made it!!
