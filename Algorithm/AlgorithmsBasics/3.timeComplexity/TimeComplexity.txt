the best explanation about time complexity and why dual loop == n^2

for(n > 10, n+=1):
	for(y > n, y+=1):

n	y	time count
0	0	0

1	0	1
	1	

2	0	2
	1
	2

because y is inside a loop, it always back to 0  and the n which is current opt
and was keep on executing while it doesn't reach its limitations.

2. tmComplexity2.png
for(x=1 < n; x *=2)

is x=1 < n? yes, 1*2=2 >> means multiply one time into 2
is x=2 < n? yes, 2*2=2^2 >> means multiply 2 times into 2
is x=2^2 < n? yes, 2^2*2=2^3 >> means multiply 3 times into 2 till x >= n

the goal is 2^k >= n >> k means how many times we do this
so time complexity == 2^k or k=log2 n. O(log2 n)/O(log n)

the time complexity is log^2 n because at the picture, it says while it is less
than n, keep on multiplying, and multiply has different val than addition.

~~~~~~~~~~~~~~~~~~~~~~~~~~~
While and if complexity
for loop -0 to n, do the work
while loop -while true, do the work
