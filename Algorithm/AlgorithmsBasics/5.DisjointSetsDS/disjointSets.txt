Disjoint Sets Data Structures - Weighted Union and Collapsing Find

Disjoint Sets (mostly used in kruskal's algo)-sets without the same elements
opts:
1. Find (A, B)-check if Arr[A] is equal to Arr[B] or not.If equal, connect the B
directly to the A which it it is the root node, if its not, connect B to the
root node of the A.
2. Union (A, B)-Connect A to B and merge the components having A and B by
changing all the elements, whose value is equal to Arr[A], to Arr[B].

ex:
set1 = {1,2,3}	(1)--(2)--(3)
set2 = {4,5,6}	(4)--(5)--(6)

-if we want to Union it, we need to connect their firsts and lasts all together
then you add their edges

ex: u,v = (3,6) u,v = (1,4)
(1)--(2)--(3)	(1)--(2)--(3)
	   |	 |	   |
(4)--(5)--(6)	(4)--(5)--(6)	set3 = {1,2,3,4,5,6}
-now they are not set1 and 2, bc they already merge as one as a set/cycle

NOTE: kruskal0-1.png is the mathematicall representation of kruskal2.png, so on.

>>kruskal3.png -you can pick who the root node is wether it is 1 or 3
>>kruskal4.png -you need to pick the 1 as root node bc 1 has 3 nodes, total set
of is 4, is bigger than 5 that has 1 node, total set of 2

>>kruskalArray0.png -head nodes has negative for means its head  is itself and
2 means they has 2 nodes, their child node contains their number, ex: 
-at the pic, node1 on array has -2 and its child 2 has its root's number;1 means
2->1 and 1->(-)/0 also contains 2 nodes 

>>kruskalArray1.png -nxt edge is (2,4). find the 2, it says its head is 1. Head
to 1 and it says its head is itself. Next we search 4 and its head is 3, then its
head is itself. head 1 and 3 has 2 nodes so we can choose who is head now but
now we choose the 1 and connect the 3 as its child node 
-node 1 contains 4 nodes now and the node3's root is 1

>>kruskalArray2.png -finish product
